console.log( 'Pre-preprend' )
$('body').prepend( mimis.jsonToJQuery( {
    'div id="window" class="row"' : {
        'div id="log" class="span8 row"' : {
            'input type="text" id="message" class="span6"' : {},
            'button id="send" class="btn span2"' : 'Send Message',
        },
        'div id="contacts" class="span4"' : {
            p : 'Contacts',
            'ul id="contact"' : {},
            'div class="btn-group"' : {
                'button id="add" class="btn"' : 'Add Contact',
                'button id="clear" class="btn"' : 'Clear Contacts',
            },
            'button id="username" class="btn"': 'Set Username',
        },
    },
} ) )

$('body').prepend( mimis.jsonToJQuery( {
    'div id="username"' : {}
} ) )

$('body').prepend( mimis.jsonToJQuery( {
    'div id="new_contact" class="hidden" title="Add Contact"': {
        'label for="name"' : 'Name:',
        'input type="text" id="name"' : {}
    }
} ) )

$('body').prepend( mimis.jsonToJQuery(
    { 'div id="set_username" class="hidden" title="Set Username"': {
        'label for="name"' : 'Name:',
        'input type="text" id="name"' : {}
    } }
) )
console.log( 'Post-preprend' )

var Database = Packages.telehash.samples.simplechat.Database
var OSQLSynchQuery = Packages.com.orientechnologies.orient.core.sql.query.OSQLSynchQuery
var ODocument = Packages.com.orientechnologies.orient.core.record.impl.ODocument
var System = java.lang.System

var isEmptyDatabase = function() {
    return Database.withDatabase( new Database.DatabaseHandler( {
        doWithDatabase : function( db ) {
            return db.getMetadata().getSchema().getClass( 'Self' ) == null
        }
    } ) )
}

ChatWindow = typeof ChatWindow != 'undefined' ? ChatWindow : {}

ChatWindow.$contactItem = typeof ChatWindow.$contactItem != 'undefined' ? ChatWindow.contacts : {}

var InterestingEndsHolderImpl = Packages.telehash.switchimpl.api.InterestingEndsHolderImpl
var ApplicationPortImpl = Packages.telehash.switchimpl.api.ApplicationPortImpl

var interestingEndsHolder = new InterestingEndsHolderImpl()
var applicationPort = new ApplicationPortImpl()

var SwitchListener = Packages.telehash.api.SwitchListener

applicationPort.addSwitchListener( new SwitchListener( {
    counterpartySwitchForEndFound : function( hash, counterpartySwitch ) {
        console.log( "counterpartySwitchForEndFound: " + hash )
        if( ! applicationPort.hash( self ).equals( hash ) ) {
            interestingEndsHolder.put( hash, counterpartySwitch )

            if( counterpartySwitch.isConnected() ) {
                ChatWindow.$contactItem[ hash ]
                    .addClass( 'online' )
                    .attr( { title: counterpartySwitch.getIP() + ":" + counterpartySwitch.getPort() } )
            } else {
                ChatWindow.$contactItem[ hash ]
                    .removeClass( 'online' )
                    .addClass( 'switched' )
                    .attr( { title: counterpartySwitch.getIP() + ":" + counterpartySwitch.getPort() } )
            }                

            var telexListenerScope = counterpartySwitch.addTelexListener( {
                receivedTelex : function( telex ) {
                    console.log( 'Recieved telex:' )
                    console.log( telex )
                    if( telex.containsKey( 'simplechat' ) ) {
                        var chat_telex = telex.get( 'simplechat' )
                        $('#log').append( $('<p/>').text( name + ": " + chat_telex.get( 'msg' ).toString() ) )
                    }
                }
            } )
        }
    }
} ) )

applicationPort.startSwitch()

ChatWindow.user = typeof ChatWindow.user != 'undefined' ? ChatWindow.user : {}
ChatWindow.user.name = typeof ChatWindow.user.name != 'undefined' ? ChatWindow.user.name :
    ( function() {
            ChatWindow.user.__defineGetter__( 'name', function() {
                return Database.withDatabase( new Database.DatabaseHandler( {
                    doWithDatabase : function( db ) {
                        if( db.getMetadata().getSchema().getClass( 'Self' ) != null ) {
                            var result = db.query( new OSQLSynchQuery( 'select * from Self order by created_at desc limit 1' ), [] )
                            if( result.size() == 0 ) {
                                return undefined
                            }
                            console.log( "Name: " + result.get( 0 ).field( 'created_at' ) )
                            return result.get( 0 ).field( 'name' )
                        }
                    }
                } ) )
            } )
        ChatWindow.user.__defineSetter__( 'name', function( name ) {
            if( typeof name != 'undefined' && ChatWindow.user.name != name ) {
                Database.withDatabase( new Database.DatabaseHandler( {
                    doWithDatabase : function( db ) {
                        Database.withDatabase( new Database.DatabaseHandlerVoid( {
                            doWithDatabase : function( db ) {
                                var doc = new ODocument( db, 'Self' )
                                doc.field( 'name', name )
                                doc.field( 'created_at', System.currentTimeMillis() )
                                doc.save()
                            }
                        } ) )
                    }
                } ) )
            }
            $('#username').text( "Connected As: " + name )

            console.log( "Setting Own End: " + applicationPort.hash( name ) )
            applicationPort.addOwnEnd( applicationPort.hash( name ) )
            
            return name
        } )
    } )()

ChatWindow.user.name = ChatWindow.user.name // Load from db

$('button#username').click( function() {
    $('#set_username').dialog( {
        buttons : {
            Add : function() {
                hostApplet.eval( "ChatWindow.user.name = '" + $(this).children( '#name' ).val() + "'" )
                $(this).children( '#name' ).val( '' )
                $('#set_username').dialog( 'close' )
            },
            Cancel : function() {
                $('#set_username').dialog( 'close' )
            },
        }
    } )
} )

ChatWindow.addContact = typeof ChatWindow.addContact != 'undefined' ? ChatWindow.addContact :
    function( name ) {
        var HashSet = java.util.HashSet
        var OType = Packages.com.orientechnologies.orient.core.metadata.schema.OType
        
        var count = Database.withDatabase( new Database.DatabaseHandler( {
            doWithDatabase : function( db ) {
                var size = 0
                if( db.getMetadata().getSchema().getClass( 'Contact' ) != null ) {
                    var result = db.query( new OSQLSynchQuery( "select * from Contact where name = '" + name + "'" ) )
                    size = result.size()
                }
                return size
            }
        } ) )
        
        if( count > 0 ) {
            console.log( "Skipping contact: " + name )
        } else {
            Database.withDatabase( new Database.DatabaseHandlerVoid( {
                doWithDatabase : function( db ) {
                    var doc = new ODocument( db, 'Contact' )
                    doc.field( 'name', name )
                    doc.field( 'created_at', System.currentTimeMillis() )
                    doc.field( 'chatlog', new HashSet(), OType.EMBEDDEDSET )
                    doc.save()
                }
            } ) )
        }

        var hash = applicationPort.hash( name )
        console.log( "Adding Other End: " + hash )
        applicationPort.addOtherEnd( hash )
        
        if( typeof ChatWindow.$contactItem[ name ] == 'undefined' ) {
            var $input = $('<input type="checkbox"/>')
            var $text = $('<span/>').text( name )
            ChatWindow.$contactItem[ hash ] = $('<li/>').append( $input ).append( $text )
            $('#contact').append( ChatWindow.$contactItem[ hash ] )
        }
    }

$('button#add').click( function() {
    $('#new_contact').dialog( {
        buttons : {
            Add : function() {
                hostApplet.eval( "ChatWindow.addContact('" + $(this).children( '#name' ).val() + "')" )
                $(this).children( '#name' ).val( '' )
                $('#new_contact').dialog( 'close' )
            },
            Cancel : function() {
                $('#new_contact').dialog( 'close' )
            },
        }
    } )
} )

ChatWindow.clearContacts = typeof ChatWindow.clearContacts != 'undefined' ? ChatWindow.clearContacts :
    function() {
        try {
            var OCommandSQL = Packages.com.orientechnologies.orient.core.sql.OCommandSQL

            Database.withDatabase( new Database.DatabaseHandlerVoid( {
                doWithDatabase : function( db ) {
                    console.log( "empty: " + ( db.getMetadata().getSchema().getClass( 'Contact' ) == null ) )
                    if( db.getMetadata().getSchema().getClass( 'Contact' ) != null ) {
                        console.log( "Deleting contacts" )
                        db.command( new OCommandSQL( 'delete from Contact' ) ).execute( [] )
                        //db.query( new OSQLSynchQuery( 'delete from Contact' ) )
                        console.log( "Contacts deleted: " + typeof db )
                    }
                }
            } ) )
        } catch( ex ) {
            console.log( "Error clearing contact: " + ex )
            throw ex
        }
        $('#contact').empty()
    }

$('button#clear').click( function() {
    ChatWindow.clearContacts()
} )

var Date = java.util.Date
var UUID = java.util.UUID
var HashMap = java.util.HashMap

ChatWindow.sendMessage = typeof ChatWindow.sendMessage != 'undefined' ? ChatWindow.sendMessage :
    function( username, msg ) {
        if( msg != null && msg.length() > 0 && msg.length() <= 1000 ) {
            console.log( "Sending: " + username + ": " + msg )

            var message = new HashMap()
            var timestamp = System.currentTimeMillis()
            var msgid = UUID.randomUUID().toString()
            message.put( 'msg', msg )
            message.put( 'ts', timestamp )
            message.put( 'msgid', msgid )
            message.put( 'snip', msg.length )

            Database.withDatabase( new Database.DatabaseHandlerVoid() {
                doWithDatabase : function( db ) {
                    var result = db.query( new OSQLSynchQuery( "select * from Contact where name = '" + username + "'" ) )
                    if( result.size() != 1 ) {
                        throw "Contact " + username + " not found in database"
                    }
                    var contact = result.get( 0 )
                    var chatlog = contact.field( 'chatlog' )
                    var chatlog_entry = new ODocument( db )
                    chatlog_entry
                        .field( 'msg', msg )
                        .field( 'ts', timestamp )
                        .field( 'msgid', msgid )
                        .field( 'snip', msg.length )
                    chatlog.add( chatlog_entry )
                    contact.save()
                }
            } )

            var telex = new HashMap()
            telex.put( 'simplechat', message )

            console.log( "Getting switch for: " + interestingEndsHolder.hash( username ) )
            var _switch = interestingEndsHolder.get( interestingEndsHolder.hash( username ) )
            if( _switch == null ) {
                console.error( "Couldn't get switch for: " + username )
            } else {
                _switch.sendTelex( interestingEndsHolder.hash( ChatWindow.user.name ), telex )
            }
        }
        if( msg != null && msg.length > 1000 ) {
            console.log( "Message Too Long: " + msg )
        }
    }

$('button#send').click( function() {
    var message = $('#message').val()
    $('#message').val( '' )
    var func = mimis.objToJSObject( function() {
        var usernames = []
        $('#contact').find( 'input' ).each( function() {
            if( $(this).is( ':checked' ) ) {
                usernames.push( $(this).parent().children( 'span' ).text() )
            }
        } )
        return usernames
    } )
    var ret = func.call( 'call', [] )
    var length = ret.getMember( 'length' ).intValue()
    for( var i = 0; i < length; i++ ) {
        var name = ret.getSlot( i )
        ChatWindow.sendMessage( name, message )
    }
} )

Database.withDatabase( new Database.DatabaseHandlerVoid( {
    doWithDatabase : function( db ) {
        if( db.getMetadata().getSchema().getClass( 'Contact' ) != null ) {
            var result = db.query( new OSQLSynchQuery( 'select * from Contact' ), [] )
            var iterator = result.iterator()
            while( iterator.hasNext() ) {
                var doc = iterator.next()
                var name = doc.field( 'name' )
                ChatWindow.addContact( name.toString() )
            }
        }
    }
} ) )
