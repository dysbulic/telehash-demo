('body').prepend( mimis.jsonToJQuery(
    { 'div id="contacts"' : {
        'p' : 'Contacts',
        'ul id="contact"' : {},
        'div class="btn-group"' : {
            'button id="add" class="btn"' : 'Add Contact',
            'button id="clear" class="btn"' : 'Clear Contacts',
        },
        'button id="username" class="btn"': 'Set Username',
    } }
) )

$('body').prepend( mimis.jsonToJQuery( {
    'div id="new_contact" class="hidden" title="Add Contact"': {
        'label for="name"' : 'Name:',
        'input type="text" id="name"' : {}
    }
} ) )

$('body').prepend( mimis.jsonToJQuery(
    { 'div id="set_username" class="hidden" title="Set Username"': {
        'label for="name"' : 'Name:',
        'input type="text" id="name"' : {}
    } }
) )

var Database = Packages.telehash.samples.simplechat.Database
var OSQLSynchQuery = Packages.com.orientechnologies.orient.core.sql.query.OSQLSynchQuery

function isEmptyDatabase() {
    return Database.withDatabase( new Database.DatabaseHandler( {
        doWithDatabase : function( db ) {
            return db.getMetadata().getSchema().getClass( 'Self' ) == null
        }
    } ) )
}

ChatWindow = typeof ChatWindow != 'undefined' ? ChatWindow : {}

ChatWindow.contacted = typeof ChatWindow.contacted != 'undefined' ? ChatWindow.contacts : {}

ChatWindow.addContact = typeof ChatWindow.addContact != 'undefined' ? ChatWindow.addContact :
    function( name ) {
        var System = java.lang.System
        var HashSet = java.util.HashSet
        var ODocument = Packages.com.orientechnologies.orient.core.record.impl.ODocument
        var OType = Packages.com.orientechnologies.orient.core.metadata.schema.OType

        var count = Database.withDatabase( new Database.DatabaseHandler( {
            doWithDatabase : function( db ) {
                var size = 0
                if( db.getMetadata().getSchema().getClass( 'Contact' ) != null ) {
                    var result = db.query( new OSQLSynchQuery( "select * from Contact where name = '" + name + "'" ) )
                    size = result.size()
                }
                return size
            }
        } ) )

        if( count > 0 ) {
            console.log( "Skipping contact: " + name )
        } else {
            Database.withDatabase( new Database.DatabaseHandlerVoid( {
                doWithDatabase : function( db ) {
                    var doc = new ODocument( db, 'Contact' )
                    doc.field( 'name', name )
                    doc.field( 'created_at', System.currentTimeMillis() )
                    doc.field( 'chatlog', new HashSet(), OType.EMBEDDEDSET )
                    doc.save()
                }
            } ) )
        }

        if( typeof ChatWindow.contacted[ name ] == 'undefined' ) {
            $('#contact').append( $('<li/>').text( name ) )
            ChatWindow.contacted[ name ] = true
        }
    }

ChatWindow.clearContacts = typeof ChatWindow.clearContacts != 'undefined' ? ChatWindow.clearContacts :
    function() {
        try {
            var OCommandSQL = Packages.com.orientechnologies.orient.core.sql.OCommandSQL

            Database.withDatabase( new Database.DatabaseHandlerVoid( {
                doWithDatabase : function( db ) {
                    console.log( "empty: " + ( db.getMetadata().getSchema().getClass( 'Contact' ) != null ) )
                    if( db.getMetadata().getSchema().getClass( 'Contact' ) != null ) {
                        console.log( "Deleting contacts" )
                        db.command( new OCommandSQL( 'delete from Contact' ) ).execute( [] )
                        //db.query( new OSQLSynchQuery( 'delete from Contact' ) )
                        console.log( "Contacts deleted: " + typeof db )
                    }
                }
            } ) )
        } catch( ex ) {
            console.log( "Error clearing contact: " + ex )
            throw ex
        }
        $('#contact').empty()
    }

ChatWindow.setUsername = typeof ChatWindow.setUsername != 'undefined' ? ChatWindow.setUsername :
    function( name ) {
        applicationPort.addOwnEnd( applicationPort.hash( name ) )
        self = name
        
        // Database.withDatabase( new Database.DatabaseHandlerVoid( {
        //     doWithDatabase : function( db ) {
        //         var doc = new ODocument( db, 'Self' )
        //         doc.field( 'name', self )
        //         doc.field( 'created_at', new Date() )
        //         doc.save()
        //     }
        // } )
        Database.withDatabase( new Database.DatabaseHandler( {
            doWithDatabase : function( db ) {
                var result = db.query( new OSQLSynchQuery( 'select * from Self' ), [] )
                if( result.size() != 1 ) {
                    throw new IllegalStateException( 'More than one Self found in database!' )
                }
                return result.get( 0 ).field( 'name' )
            }
        } ) )
    }

$('button#clear').click( function() {
    ChatWindow.clearContacts()
} )

$('button#add').click( function() {
    console.log( "Adding" )
    $('#new_contact').dialog( {
        buttons : {
            Add : function() {
                hostApplet.eval( "ChatWindow.addContact('" + $("#name").val() + "')" )
                $('#new_contact').dialog( 'close' )
            },
            Cancel : function() {
                $('#new_contact').dialog( 'close' )
            },
        }
    } )
} )

$('button#username').click( function() {
    $('#set_username').dialog( {
        buttons : {
            Add : function() {
                hostApplet.eval( "ChatWindow.setUsername('" + $("#name").val() + "')" )
                $('#set_username').dialog( 'close' )
            },
            Cancel : function() {
                $('#set_username').dialog( 'close' )
            },
        }
    } )
} )


var InterestingEndsHolderImpl = Packages.telehash.switchimpl.api.InterestingEndsHolderImpl
var ApplicationPortImpl = Packages.telehash.switchimpl.api.ApplicationPortImpl

var interestingEndsHolder = new InterestingEndsHolderImpl()
var applicationPort = new ApplicationPortImpl()
var self

var SwitchListener = Packages.telehash.api.SwitchListener

applicationPort.addSwitchListener( new SwitchListener( {
    counterpartySwitchForEndFound : function( string, counterpartySwitch ) {
        if( ! applicationPort.hash( self ).equals( string ) ) {
            interestingEndsHolder.put( string, counterpartySwitch )
        }
    }
} ) )

//applicationPort.startSwitch()

console.log( "typeof Database.isEmptyDatabase = " + typeof Database.isEmptyDatabase )

console.log( "isEmptyDatabase() = " + isEmptyDatabase() )

Database.withDatabase( new Database.DatabaseHandlerVoid( {
    doWithDatabase : function( db ) {
        if( db.getMetadata().getSchema().getClass( 'Contact' ) != null ) {
            var result = db.query( new OSQLSynchQuery( 'select * from Contact' ), [] )
            var iterator = result.iterator()
            while( iterator.hasNext() ) {
                var doc = iterator.next()
                var name = doc.field( 'name' )
                ChatWindow.addContact( name.toString() )
            }
        }
    }
} ) )
