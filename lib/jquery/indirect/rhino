/**
 * Provides a jQuery interface to the DOM of the page where an applet
 * is executing this script.
 *
 * hostApplet is a reference to the applet
 */

print( "Entering: jquery/indirect/" + "\n" )

var JSObject = Packages.netscape.javascript.JSObject

var clickHandlers = [] // Limit 1, atm
var $rets = []

function guidClicked( guid ) {
    var handler = clickHandlers[ guid ]
    if( handler != undefined ) {
        handler.call( $rets[ guid ] )
    } else {
        print( "Couldn't get handler: " + guid + " : " + clickHandlers.length + "\n" )
    }
}

var $ = function( arg1 ) {
    if( arg1.isIndirectJQuery && arguments.length == 1 ) {
        return arg1
    }
    
    print( "Entering: jquery/indirect/$" + "\n" )
    var window = JSObject.getWindow( hostApplet )
    if( window ) {
        var args = Array.prototype.slice.call( arguments )
        var $obj = window.call( 'indirectJQuery', args )
        var guid = $obj.getMember( 'guid' )

        var $ret = {
            append: function( $elem ) {
                print( "Appending: " + $elem + " : " + $elem.guid + "\n" )
                $obj.call( 'appendByGUID', [ $elem.guid ] )
                return $ret
            },
            empty: function() {
                var args = Array.prototype.slice.call( arguments )
                $obj.call( 'empty', args )
                return $ret
            },
            remove: function() {
                var args = Array.prototype.slice.call( arguments )
                $obj.call( 'remove', args )
                return $ret
            },
            addClass: function() {
                var args = Array.prototype.slice.call( arguments )
                $obj.call( 'addClass', args )
                return $ret
            },
            removeClass: function() {
                var args = Array.prototype.slice.call( arguments )
                $obj.call( 'removeClass', args )
                return $ret
            },
            val: function() {
                var args = Array.prototype.slice.call( arguments )
                var val = $obj.call( 'val', args )
                if( arguments.length == 0 ) {
                    return val
                } else {
                    return $ret
                }
            },
            text: function( text ) {
                var args = Array.prototype.slice.call( arguments )
                var $text = $obj.call( 'text', args )
                if( typeof text == 'undefined' ) {
                    return $text
                } else {
                    return $ret
                }
            },
            attr: function( arg1 ) {
                var args = Array.prototype.slice.call( arguments )
                
                if( typeof arg1 == 'object' ) {
                    var script = "(function() { return {} })()"
                    var obj = window.eval( script )
                    for( prop in arg1 ) {
                        obj.setMember( prop, arg1[ prop ] ) 
                    }
                    args[0] = obj
                }
                var $attr = $obj.call( 'attr', args )
                if( arguments.length == 1 && typeof arguments[0] == 'string' ) {
                    return $attr
                } else {
                    return $ret
                }
            },
            click: function( handler ) {
                clickHandlers[ $ret.guid ] = handler
                print( "/lib/jquery/indirect/$/click: " + guid + " : " + typeof clickHandlers[ guid ] + " : " + clickHandlers.length + "\n" )
                $obj.call( 'clickByGUID', [ guid ] )
                return $ret
            },
            extend: function() {
	        var options, name, src, copy, copyIsArray, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	        // Handle a deep copy situation
	        if ( typeof target === "boolean" ) {
		    deep = target;
		    target = arguments[1] || {};
		    // skip the boolean and the target
		    i = 2;
	        }

	        // Handle case when target is a string or something (possible in deep copy)
	        if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
		    target = {};
	        }

	        // extend jQuery itself if only one argument is passed
	        if ( length === i ) {
		    target = this;
		    --i;
	        }

	        for ( ; i < length; i++ ) {
		    // Only deal with non-null/undefined values
		    if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
			    src = target[ name ];
			    copy = options[ name ];

			    // Prevent never-ending loop
			    if ( target === copy ) {
				continue;
			    }
                            
			    // Recurse if we're merging plain objects or arrays
			    if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
				if ( copyIsArray ) {
				    copyIsArray = false;
				    clone = src && jQuery.isArray(src) ? src : [];
                                    
				} else {
				    clone = src && jQuery.isPlainObject(src) ? src : {};
				}
                                
				// Never move original objects, clone them
				target[ name ] = jQuery.extend( deep, clone, copy );
                                
				// Don't bring in undefined values
			    } else if ( copy !== undefined ) {
				target[ name ] = copy;
			    }
			}
		    }
	        }

	        // Return the modified object
	        return target;
            },
            guid: guid,
            isIndirectJQuery: true,
        }
    } else {
        print( "Couldn't get window" + "\n" )
    }
    $rets[ guid ] = $ret
    return $ret
}
