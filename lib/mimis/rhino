mimis = typeof mimis != 'undefined' ? mimis : {}

mimis.objToJSObject = typeof mimis.objToJSObject != 'undefined' ? mimis.objToJSObject :
    function objToJSObject( obj ) {
        var JSObject = Packages.netscape.javascript.JSObject
        var window = JSObject.getWindow( hostApplet )

        if( typeof obj == 'object' ) {
            if( obj == null ) {
                return obj
            }
            var jsObj = window.eval( '(function() { return {} })()' )
            for( prop in obj ) {
                if( obj.hasOwnProperty( prop ) ) {
                    jsObj.setMember( prop, mimis.objToJSObject( obj[ prop ] ) )
                }
            }
            return jsObj
        } else if( typeof obj == 'function' ) {
            var jsFunc = window.eval( "(function() { return (" + obj.toString() + ") })()" )
            return jsFunc
        }
        return obj
    }

mimis.objArrayToJSObjectArray = typeof mimis.objArrayToJSObjectArray != 'undefined' ? mimis.objArrayToJSObjectArray :
    function objArrayToJSObjectArray( obj ) {
        var out = []
        for( idx in obj ) {
            out[ idx ] = mimis.objToJSObject( obj[ idx ] )
        }
        return out
    }

mimis.jsonToJQuery = typeof mimis.jsonToJQuery != 'undefined' ? mimis.jsonToJQuery :
    function( json, $parent ) {
        function objSize( obj ) {
            var size = 0, key
            for( key in obj ) {
                if( obj.hasOwnProperty( key ) ) size++
            }
            return size
        }
        if( typeof $parent == 'undefined' && objSize( json ) > 1 ) {
            return mimis.jsonToJQuery( json, $('<div/>') )
        }
        for( prop in json ) {
            if( prop[0] == '<' ) {
                elem = prop
            } else {
                elem = '<' + prop + '/>'
            }
            var $new = $(elem)
            if( typeof json[prop] == "string" ) {
                $new.text( json[prop] )
            } else if( typeof json[prop] == "object" ) {
                mimis.jsonToJQuery( json[prop], $new )
            }
            if( typeof $parent == 'undefined' ) {
                $parent = $new
            } else {
                $parent.append( $new )
            }
        }
        return $parent
    }
