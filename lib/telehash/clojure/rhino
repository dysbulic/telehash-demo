if( typeof jsonToJQuery == 'undefined' ) {
    function jsonToJQuery( json, $parent ) {
        function objSize( obj ) {
            var size = 0, key
            for( key in obj ) {
                if( obj.hasOwnProperty( key ) ) size++
            }
            return size
        }
        if( typeof $parent == 'undefined' && objSize( json ) > 1 ) {
            $parent = $('<div/>')
        }
        for( prop in json ) {
            if( prop[0] == '<' ) {
                elem = prop
            } else {
                elem = '<' + prop + '/>'
            }
            var $new = $(elem)
            if( typeof json[prop] == "string" ) {
                $new.text( json[prop] )
            } else if( typeof json[prop] == "object" ) {
                jsonToJQuery( json[prop], $new )
            }
            if( typeof $parent == 'undefined' ) {
                $parent = $new
            } else {
                $parent.append( $new )
            }
        }
        return $parent
    }
}

$('body').append( jsonToJQuery(
    { 'div id="contacts"' : {
        p : 'Contacts',
        'ul id="contact"' : {},
        'button id="add"': 'Add Contact'
    } }
) )

$('body').append( jsonToJQuery(
    { 'div id="new_contact" class="hidden"': {
        'label for="name"' : 'Name:',
        'input type="text" id="name"' : {}
    } }
) )

var Database = Packages.telehash.samples.simplechat.Database

ChatWindow = typeof ChatWindow == 'undefined' ? {} : ChatWindow
ChatWindow.addContact = typeof ChatWindow.addContact != 'undefined' ? ChatWindow.addContact :
    function( name ) {
        var System = java.lang.System
        var HashSet = java.util.HashSet
        var ODocument = Packages.com.orientechnologies.orient.core.record.impl.ODocument
        var OType = Packages.com.orientechnologies.orient.core.metadata.schema.OType

        Database.withDatabase( new Database.DatabaseHandlerVoid ( {
            doWithDatabase : function( db ) {
                var doc = new ODocument( db, 'Contact' )
                doc.field( 'name', name )
                doc.field( 'created_at', System.currentTimeMillis() )
                doc.field( 'chatlog', new HashSet(), OType.EMBEDDEDSET )
                doc.save()
            }
        } ) )

        $('#contact').append( $('<li/>').text( name ) )
    }

ChatWindow.clearContacts = typeof ChatWindow.clearContacts != 'undefined' ? ChatWindow.clearContacts :
    function() {
        Database.withDatabase( new Database.DatabaseHandlerVoid ( {
            doWithDatabase : function( db ) {
                var doc = new ODocument( db, 'Contact' )
                doc.field( 'name', name )
                doc.field( 'created_at', System.currentTimeMillis() )
                doc.field( 'chatlog', new HashSet(), OType.EMBEDDEDSET )
                doc.save()
            }
        } ) )
    }

$('button#add').click( function() {
    $('#new_contact').dialog( {
        buttons : {
            Add : function() {
                hostApplet.eval( "ChatWindow.addContact('" + $("#name").val() + "')" )
                $('#new_contact').dialog( 'close' )
            },
            Cancel : function() {
                $('#new_contact').dialog( 'close' )
            },
        }
    } )
} )

var InterestingEndsHolderImpl = Packages.telehash.switchimpl.api.InterestingEndsHolderImpl
var ApplicationPortImpl = Packages.telehash.switchimpl.api.ApplicationPortImpl
var OSQLSynchQuery = Packages.com.orientechnologies.orient.core.sql.query.OSQLSynchQuery

var interestingEndsHolder = new InterestingEndsHolderImpl()
var applicationPort = new ApplicationPortImpl()
var self

function setSelf( name ) {
    applicationPort.addOwnEnd( applicationPort.hash( name ) )
    self = name
}

if(! Database.isEmptyDatabase() ) {
    setSelf( Database.withDatabase( new Database.DatabaseHandler( {
        doWithDatabase : function( db ) {
            var result = db.query( new OSQLSynchQuery( 'select * from Self' ) )
            if( result.size() != 1 ) {
                throw new IllegalStateException( 'More than one Self found in database!' )
            }
            return result.get( 0 ).field( 'name' )
        }
    } ) ) )
}

var SwitchListener = Packages.telehash.api.SwitchListener

applicationPort.addSwitchListener( new SwitchListener( {
    counterpartySwitchForEndFound : function( string, counterpartySwitch ) {
        if( ! applicationPort.hash( self ).equals( string ) ) {
            interestingEndsHolder.put( string, counterpartySwitch )
        }
    }
} ) )
applicationPort.startSwitch()

var Iterator = java.util.Iterator

if( ! Database.isEmptyDatabase() ) {
    Database.withDatabase( new Database.DatabaseHandlerVoid( {
        doWithDatabase : function( db ) {
            if( db.getMetadata().getSchema().getClass( 'Contact' ) != null ) {
                var result = db.query( new OSQLSynchQuery( 'select * from Contact' ) )
                var iterator = result.iterator()
                while( iterator.hasNext() ) {
                    var doc = iterator.next()
                    var name = doc.field( 'name' )
                    ChatWindow.addContact( name.toString() )
                }
            }
        }
    } ) )
}
